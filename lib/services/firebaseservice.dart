import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:complaintnow/components/postmodel.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../components/usermodel.dart';

class database {
  final _db = FirebaseFirestore.instance;
  final _auth = FirebaseAuth.instance;

  //method to check if the current user is admin or not
  Future<bool> isCurrentUserAdmin() async {
    String uid = _auth.currentUser!.uid;
    UserProfile? userProfile = await getuserfromfirebase(uid);
    return userProfile?.isadmin ?? false;
  }


  void debugprint(String message){
    assert((){
      print(message);
      return true;
    }());
  }


  // saving the user info
  Future<void> saveuserinfoinfirebase({
    required String name,
    required String email,
  }) async {
    String uid = _auth.currentUser!.uid;

    // Check if the email is from the college domain
    if (!email.endsWith('@srmist.edu.in')) {
      debugprint("The email must be a valid college email.");
      return;
    }

    UserProfile user = UserProfile(
      uid: uid,
      name: name,
      email: email,
    );

    final userMap = user.toMap();
    await _db.collection("Users").doc(uid).set(userMap);
  }



  // getting the user info method
  Future<UserProfile?> getuserfromfirebase(String uid) async {
    try {
      DocumentSnapshot userdoc = await _db.collection("Users").doc(uid).get();

      if (userdoc.exists) {
        UserProfile profile = UserProfile.fromDocument(userdoc);
        return profile;
      } else {
        return null;
      }
    } catch (e) {
      debugprint('Error: $e');
      return null;
    }
  }

  // posting a complaint
  Future<void> postmessageinfirebase(String Complaint, String complainttype,
      String hostelname, String registernumber) async {
    try {
      String uid = _auth.currentUser!.uid;

      Post newpost = Post(
        id: '', // autogenerated by firebase
        uid: uid,
        timestamp: Timestamp.now(),
        Complaint: Complaint,
        complainttype: complainttype,
        hostelname: hostelname,
        registernumber: registernumber,
        likecount: 0,
        likedby: [],
        status: 'Pending',

      );

      Map<String, dynamic> newpostmap = newpost.toMap();
      await _db.collection("Posts").add(newpostmap);
    } catch (e) {
      print(e);
    }
  }
  //deleting a complaint
  Future<void> deletepostfromfirebase(String postid) async {
    try {
      await _db.collection("Posts").doc(postid).delete();
    }


    catch (e) {
      print(e);
    }
  }

  // get all complaints
  Future<List<Post>> getallpostsfromfirebase() async {
    try {
      QuerySnapshot snapshot = await _db
          .collection("Posts")
          .orderBy('timestamp', descending: true)
          .get();

      return snapshot.docs.map((doc) {
        return Post.fromDocument(doc);
      }).toList();
    } catch (e) {
      debugprint("Error fetching posts: $e");
      return [];
    }
  }
  // making a complaint a favourite
  Future<void> togglelikeinfirebase(String postid) async {
    try{
      //getting the current uid first
      String uid = _auth.currentUser!.uid;

      //go to the doc of the post in firebase
      DocumentReference postdoc = _db.collection("Posts").doc(postid);

      //executing the fav function
      await _db.runTransaction((transaction) async{
        //get post data
        DocumentSnapshot postsnapshot = await transaction.get(postdoc);
        //getting the users who added to faved the post
        List<String> likedby = List<String>.from(postsnapshot['likedby']??[]);
        //get like count
        int currentlikecount = postsnapshot['likecount'];//
        //if the user has not liked then it will like
        if (!likedby.contains(uid)) {
          //then add user to like list
          likedby.add(uid);
          //incrementing the like count
          currentlikecount++;
        } else {
          //remove user from like list
          likedby.remove(uid);
          //also decrement the like count
          currentlikecount--;
          
        }
        //update in firebase
        transaction.update(postdoc, {
          'likecount': currentlikecount,
          'likedby':likedby,

        });

      },);


    }
    catch (e) {
      print(e);

    }

  }
  // Method to update complaint status
  Future<void> updateComplaintStatus(String postId, String newStatus) async {
    try {
      await _db.collection("Posts").doc(postId).update({
        'status': newStatus, // Update the status field in Firestore
      });
      debugprint("Status updated to: $newStatus for post ID: $postId");
    } catch (e) {
      debugprint("Error updating status: $e");
    }
  }
}
